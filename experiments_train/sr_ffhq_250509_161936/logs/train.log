25-05-09 16:19:36.432 - INFO:   name: sr_ffhq
  phase: train
  gpu_ids: [0]
  path:[
    stage: experiments_train\sr_ffhq_250509_161936\train
    log: experiments_train\sr_ffhq_250509_161936\logs
    tb_logger: experiments_train\sr_ffhq_250509_161936\tb_logger
    results: experiments_train\sr_ffhq_250509_161936\results
    checkpoint: experiments_train\sr_ffhq_250509_161936\checkpoint
    resume_state: None
    experiments_root: experiments_train\sr_ffhq_250509_161936
  ]
  datasets:[
    train:[
      name: Water
      mode: HR
      dataroot: dataset/water_train_16_256
      datatype: img
      l_resolution: 16
      r_resolution: 256
      batch_size: 10
      num_workers: 8
      use_shuffle: True
      data_len: -1
    ]
    val:[
      name: Water
      mode: HR
      dataroot: dataset/water_val_16_256
      datatype: img
      l_resolution: 16
      r_resolution: 256
      data_len: 3
    ]
  ]
  model:[
    which_model_G: trans
    finetune_norm: False
    unet:[
      in_channel: 6
      out_channel: 3
      inner_channel: 48
      norm_groups: 24
      channel_multiplier: [1, 2, 4, 8, 8]
      attn_res: [16]
      res_blocks: 2
      dropout: 0.2
    ]
    beta_schedule:[
      train:[
        schedule: linear
        n_timestep: 2000
        linear_start: 1e-06
        linear_end: 0.01
      ]
      val:[
        schedule: linear
        n_timestep: 2000
        linear_start: 1e-06
        linear_end: 0.01
      ]
    ]
    diffusion:[
      image_size: 256
      channels: 3
      conditional: True
    ]
  ]
  train:[
    n_iter: 1000000
    val_freq: 50000
    save_checkpoint_freq: 50000
    print_freq: 200
    optimizer:[
      type: adam
      lr: 0.0001
    ]
    ema_scheduler:[
      step_start_ema: 5000
      update_ema_every: 1
      ema_decay: 0.9999
    ]
  ]
  wandb:[
    project: sr_ffhq
  ]
  distributed: False
  log_wandb_ckpt: False
  log_eval: False
  enable_wandb: False

25-05-09 16:19:36.468 - INFO: Dataset [LRHRDataset2 - Water] is created.
25-05-09 16:19:36.469 - INFO: Dataset [LRHRDataset2 - Water] is created.
25-05-09 16:19:36.469 - INFO: Initial Dataset Finished
25-05-09 16:19:39.771 - INFO: Network G structure: GaussianDiffusion, with parameters: 18,340,833
25-05-09 16:19:39.772 - INFO: GaussianDiffusion(
  (denoise_fn): UNet(
    (time_mlp): Sequential(
      (0): TimeEmbedding()
      (1): Linear(in_features=48, out_features=192, bias=True)
      (2): Swish()
      (3): Linear(in_features=192, out_features=48, bias=True)
    )
    (encoder_water): Encoder(
      (conv1): Sequential(
        (0): Conv2d(6, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (conv2): Sequential(
        (0): Conv2d(48, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): PixelUnshuffle(downscale_factor=2)
      )
      (conv3): Sequential(
        (0): Conv2d(96, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): PixelUnshuffle(downscale_factor=2)
      )
      (conv4): Sequential(
        (0): Conv2d(192, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): PixelUnshuffle(downscale_factor=2)
      )
      (block1): ResnetBloc_eca(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=48, out_features=48, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(24, 48, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(24, 48, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): Sequential(
          (0): TransformerBlock_eca(
            (norm1): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (attn): Attention_eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
            (norm2): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (ffn): FeedForward(
              (project_in): Conv2d(48, 254, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (dwconv): Conv2d(254, 254, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=254, bias=False)
              (project_out): Conv2d(127, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
        )
      )
      (block2): ResnetBloc_eca(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=48, out_features=96, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(24, 96, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(24, 96, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): Sequential(
          (0): TransformerBlock_eca(
            (norm1): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (attn): Attention_eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
            (norm2): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (ffn): FeedForward(
              (project_in): Conv2d(96, 510, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (dwconv): Conv2d(510, 510, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=510, bias=False)
              (project_out): Conv2d(255, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
        )
      )
      (block3): ResnetBloc_eca(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=48, out_features=192, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(24, 192, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(24, 192, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): Sequential(
          (0): TransformerBlock_eca(
            (norm1): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (attn): Attention_eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
            (norm2): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (ffn): FeedForward(
              (project_in): Conv2d(192, 1020, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (dwconv): Conv2d(1020, 1020, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1020, bias=False)
              (project_out): Conv2d(510, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
        )
      )
      (block4): ResnetBloc_eca(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=48, out_features=384, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(24, 384, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(24, 384, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): Sequential(
          (0): TransformerBlock_eca(
            (norm1): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (attn): Attention_eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
            (norm2): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (ffn): FeedForward(
              (project_in): Conv2d(384, 2042, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (dwconv): Conv2d(2042, 2042, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2042, bias=False)
              (project_out): Conv2d(1021, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
        )
      )
      (conv_up3): Sequential(
        (0): Conv2d(384, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): PixelShuffle(upscale_factor=2)
      )
      (conv_up2): Sequential(
        (0): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): PixelShuffle(upscale_factor=2)
      )
      (conv_up1): Sequential(
        (0): Conv2d(96, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): PixelShuffle(upscale_factor=2)
      )
      (conv_cat3): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv_cat2): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (decoder_block3): ResnetBloc_eca(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=48, out_features=192, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(24, 192, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(24, 192, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): Sequential(
          (0): TransformerBlock_eca(
            (norm1): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (attn): Attention_eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
            (norm2): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (ffn): FeedForward(
              (project_in): Conv2d(192, 1020, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (dwconv): Conv2d(1020, 1020, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1020, bias=False)
              (project_out): Conv2d(510, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
        )
      )
      (decoder_block2): ResnetBloc_eca(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=48, out_features=96, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(24, 96, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(24, 96, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): Sequential(
          (0): TransformerBlock_eca(
            (norm1): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (attn): Attention_eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
            (norm2): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (ffn): FeedForward(
              (project_in): Conv2d(96, 510, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (dwconv): Conv2d(510, 510, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=510, bias=False)
              (project_out): Conv2d(255, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
        )
      )
      (decoder_block1): ResnetBloc_eca(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=48, out_features=96, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(24, 96, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(24, 96, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): Sequential(
          (0): TransformerBlock_eca(
            (norm1): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (attn): Attention_eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
            (norm2): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (ffn): FeedForward(
              (project_in): Conv2d(96, 510, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (dwconv): Conv2d(510, 510, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=510, bias=False)
              (project_out): Conv2d(255, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
        )
      )
    )
    (refine): ResnetBloc_eca(
      (res_block): ResnetBlock(
        (mlp): Sequential(
          (0): Swish()
          (1): Linear(in_features=48, out_features=96, bias=True)
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(24, 96, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(24, 96, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Identity()
      )
      (attn): Sequential(
        (0): TransformerBlock_eca(
          (norm1): LayerNorm(
            (body): WithBias_LayerNorm()
          )
          (attn): Attention_eca(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (sigmoid): Sigmoid()
          )
          (norm2): LayerNorm(
            (body): WithBias_LayerNorm()
          )
          (ffn): FeedForward(
            (project_in): Conv2d(96, 510, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dwconv): Conv2d(510, 510, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=510, bias=False)
            (project_out): Conv2d(255, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
        )
      )
    )
    (de_predict): Sequential(
      (0): Conv2d(96, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (loss_func): L1Loss()
  (style_loss): VGGPerceptualLoss(
    (blocks): ModuleList(
      (0): Sequential(
        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
      )
      (1): Sequential(
        (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (6): ReLU(inplace=True)
        (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (8): ReLU(inplace=True)
      )
      (2): Sequential(
        (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (11): ReLU(inplace=True)
        (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (13): ReLU(inplace=True)
        (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (15): ReLU(inplace=True)
      )
      (3): Sequential(
        (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (18): ReLU(inplace=True)
        (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (20): ReLU(inplace=True)
        (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (22): ReLU(inplace=True)
      )
    )
  )
)
25-05-09 16:19:39.775 - INFO: Model [DDPM] is created.
25-05-09 16:19:39.776 - INFO: Initial Model Finished
