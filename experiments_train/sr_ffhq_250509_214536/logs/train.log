25-05-09 21:45:36.073 - INFO: Dataset [LRHRDataset2 - Water] is created.
25-05-09 21:45:39.167 - INFO: Loading pretrained model for G [experiments_supervised/I1000_E40] ...
25-05-09 21:45:39.209 - INFO: Network G structure: GaussianDiffusion, with parameters: 12,409,243
25-05-09 21:45:39.209 - INFO: GaussianDiffusion(
  (denoise_fn): UNet(
    (time_mlp): Sequential(
      (0): TimeEmbedding()
      (1): Linear(in_features=32, out_features=128, bias=True)
      (2): Swish()
      (3): Linear(in_features=128, out_features=32, bias=True)
    )
    (encoder_water): Encoder(
      (conv1): Sequential(
        (0): Conv2d(6, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (conv2): Sequential(
        (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): PixelUnshuffle(downscale_factor=2)
      )
      (conv3): Sequential(
        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): PixelUnshuffle(downscale_factor=2)
      )
      (conv4): Sequential(
        (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): PixelUnshuffle(downscale_factor=2)
      )
      (block1): ResnetBloc_eca(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=32, out_features=32, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(16, 32, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(16, 32, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): Sequential(
          (0): TransformerBlock_eca(
            (norm1): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (attn): Attention_eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
            (norm2): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (ffn): FeedForward(
              (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
              (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
        )
      )
      (block2): ResnetBloc_eca(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=32, out_features=64, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(16, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(16, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): Sequential(
          (0): TransformerBlock_eca(
            (norm1): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (attn): Attention_eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
            (norm2): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (ffn): FeedForward(
              (project_in): Conv2d(64, 340, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (dwconv): Conv2d(340, 340, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=340, bias=False)
              (project_out): Conv2d(170, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
        )
      )
      (block3): ResnetBloc_eca(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=32, out_features=128, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(16, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(16, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): Sequential(
          (0): TransformerBlock_eca(
            (norm1): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (attn): Attention_eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
            (norm2): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (ffn): FeedForward(
              (project_in): Conv2d(128, 680, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (dwconv): Conv2d(680, 680, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=680, bias=False)
              (project_out): Conv2d(340, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
        )
      )
      (block4): ResnetBloc_eca(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=32, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(16, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(16, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): Sequential(
          (0): TransformerBlock_eca(
            (norm1): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (attn): Attention_eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
            (norm2): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (ffn): FeedForward(
              (project_in): Conv2d(256, 1360, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (dwconv): Conv2d(1360, 1360, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1360, bias=False)
              (project_out): Conv2d(680, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
        )
      )
      (conv_up3): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): PixelShuffle(upscale_factor=2)
      )
      (conv_up2): Sequential(
        (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): PixelShuffle(upscale_factor=2)
      )
      (conv_up1): Sequential(
        (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): PixelShuffle(upscale_factor=2)
      )
      (conv_cat3): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv_cat2): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (decoder_block3): ResnetBloc_eca(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=32, out_features=128, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(16, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(16, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): Sequential(
          (0): TransformerBlock_eca(
            (norm1): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (attn): Attention_eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
            (norm2): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (ffn): FeedForward(
              (project_in): Conv2d(128, 680, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (dwconv): Conv2d(680, 680, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=680, bias=False)
              (project_out): Conv2d(340, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
        )
      )
      (decoder_block2): ResnetBloc_eca(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=32, out_features=64, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(16, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(16, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): Sequential(
          (0): TransformerBlock_eca(
            (norm1): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (attn): Attention_eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
            (norm2): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (ffn): FeedForward(
              (project_in): Conv2d(64, 340, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (dwconv): Conv2d(340, 340, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=340, bias=False)
              (project_out): Conv2d(170, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
        )
      )
      (decoder_block1): ResnetBloc_eca(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=32, out_features=64, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(16, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(16, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): Sequential(
          (0): TransformerBlock_eca(
            (norm1): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (attn): Attention_eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
            (norm2): LayerNorm(
              (body): WithBias_LayerNorm()
            )
            (ffn): FeedForward(
              (project_in): Conv2d(64, 340, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (dwconv): Conv2d(340, 340, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=340, bias=False)
              (project_out): Conv2d(170, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
        )
      )
    )
    (refine): ResnetBloc_eca(
      (res_block): ResnetBlock(
        (mlp): Sequential(
          (0): Swish()
          (1): Linear(in_features=32, out_features=64, bias=True)
        )
        (block1): Block(
          (block): Sequential(
            (0): GroupNorm(16, 64, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (block2): Block(
          (block): Sequential(
            (0): GroupNorm(16, 64, eps=1e-05, affine=True)
            (1): Swish()
            (2): Identity()
            (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (res_conv): Identity()
      )
      (attn): Sequential(
        (0): TransformerBlock_eca(
          (norm1): LayerNorm(
            (body): WithBias_LayerNorm()
          )
          (attn): Attention_eca(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (sigmoid): Sigmoid()
          )
          (norm2): LayerNorm(
            (body): WithBias_LayerNorm()
          )
          (ffn): FeedForward(
            (project_in): Conv2d(64, 340, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dwconv): Conv2d(340, 340, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=340, bias=False)
            (project_out): Conv2d(170, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
        )
      )
    )
    (de_predict): Sequential(
      (0): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (loss_func): L1Loss()
  (style_loss): VGGPerceptualLoss(
    (blocks): ModuleList(
      (0): Sequential(
        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
      )
      (1): Sequential(
        (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (6): ReLU(inplace=True)
        (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (8): ReLU(inplace=True)
      )
      (2): Sequential(
        (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (11): ReLU(inplace=True)
        (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (13): ReLU(inplace=True)
        (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (15): ReLU(inplace=True)
      )
      (3): Sequential(
        (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (18): ReLU(inplace=True)
        (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (20): ReLU(inplace=True)
        (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (22): ReLU(inplace=True)
      )
    )
  )
)
25-05-09 21:45:39.221 - INFO: Model [DDPM] is created.
